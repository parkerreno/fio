#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace fio.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fiodb")]
	public partial class SqlLinkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertFio(Fio instance);
    partial void UpdateFio(Fio instance);
    partial void DeleteFio(Fio instance);
    partial void InsertPayer(Payer instance);
    partial void UpdatePayer(Payer instance);
    partial void DeletePayer(Payer instance);
    partial void InsertPaymentDetail(PaymentDetail instance);
    partial void UpdatePaymentDetail(PaymentDetail instance);
    partial void DeletePaymentDetail(PaymentDetail instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public SqlLinkDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["fiodbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SqlLinkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlLinkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlLinkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlLinkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<Fio> Fios
		{
			get
			{
				return this.GetTable<Fio>();
			}
		}
		
		public System.Data.Linq.Table<Payer> Payers
		{
			get
			{
				return this.GetTable<Payer>();
			}
		}
		
		public System.Data.Linq.Table<PaymentDetail> PaymentDetails
		{
			get
			{
				return this.GetTable<PaymentDetail>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bills")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FioId;
		
		private decimal _RAmount;
		
		private decimal _SAmount;
		
		private int _Due;
		
		private EntitySet<PaymentDetail> _PaymentDetails;
		
		private EntityRef<Fio> _Fio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFioIdChanging(int value);
    partial void OnFioIdChanged();
    partial void OnRAmountChanging(decimal value);
    partial void OnRAmountChanged();
    partial void OnSAmountChanging(decimal value);
    partial void OnSAmountChanged();
    partial void OnDueChanging(int value);
    partial void OnDueChanged();
    #endregion
		
		public Bill()
		{
			this._PaymentDetails = new EntitySet<PaymentDetail>(new Action<PaymentDetail>(this.attach_PaymentDetails), new Action<PaymentDetail>(this.detach_PaymentDetails));
			this._Fio = default(EntityRef<Fio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FioId", DbType="Int NOT NULL")]
		public int FioId
		{
			get
			{
				return this._FioId;
			}
			set
			{
				if ((this._FioId != value))
				{
					if (this._Fio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFioIdChanging(value);
					this.SendPropertyChanging();
					this._FioId = value;
					this.SendPropertyChanged("FioId");
					this.OnFioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAmount", DbType="Money NOT NULL")]
		public decimal RAmount
		{
			get
			{
				return this._RAmount;
			}
			set
			{
				if ((this._RAmount != value))
				{
					this.OnRAmountChanging(value);
					this.SendPropertyChanging();
					this._RAmount = value;
					this.SendPropertyChanged("RAmount");
					this.OnRAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SAmount", DbType="Money NOT NULL")]
		public decimal SAmount
		{
			get
			{
				return this._SAmount;
			}
			set
			{
				if ((this._SAmount != value))
				{
					this.OnSAmountChanging(value);
					this.SendPropertyChanging();
					this._SAmount = value;
					this.SendPropertyChanged("SAmount");
					this.OnSAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due", DbType="Int NOT NULL")]
		public int Due
		{
			get
			{
				return this._Due;
			}
			set
			{
				if ((this._Due != value))
				{
					this.OnDueChanging(value);
					this.SendPropertyChanging();
					this._Due = value;
					this.SendPropertyChanged("Due");
					this.OnDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_PaymentDetail", Storage="_PaymentDetails", ThisKey="Id", OtherKey="BillId")]
		public EntitySet<PaymentDetail> PaymentDetails
		{
			get
			{
				return this._PaymentDetails;
			}
			set
			{
				this._PaymentDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fio_Bill", Storage="_Fio", ThisKey="FioId", OtherKey="Id", IsForeignKey=true)]
		public Fio Fio
		{
			get
			{
				return this._Fio.Entity;
			}
			set
			{
				Fio previousValue = this._Fio.Entity;
				if (((previousValue != value) 
							|| (this._Fio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fio.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Fio.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._FioId = value.Id;
					}
					else
					{
						this._FioId = default(int);
					}
					this.SendPropertyChanged("Fio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fios")]
	public partial class Fio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _Name;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<Payer> _Payers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Fio()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Payers = new EntitySet<Payer>(new Action<Payer>(this.attach_Payers), new Action<Payer>(this.detach_Payers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fio_Bill", Storage="_Bills", ThisKey="Id", OtherKey="FioId")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fio_Payer", Storage="_Payers", ThisKey="Id", OtherKey="FioId")]
		public EntitySet<Payer> Payers
		{
			get
			{
				return this._Payers;
			}
			set
			{
				this._Payers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fio", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Fios.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Fios.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Fio = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Fio = null;
		}
		
		private void attach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.Fio = this;
		}
		
		private void detach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.Fio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payers")]
	public partial class Payer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FioId;
		
		private string _Name;
		
		private string _VenmoId;
		
		private EntitySet<PaymentDetail> _PaymentDetails;
		
		private EntityRef<Fio> _Fio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFioIdChanging(int value);
    partial void OnFioIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVenmoIdChanging(string value);
    partial void OnVenmoIdChanged();
    #endregion
		
		public Payer()
		{
			this._PaymentDetails = new EntitySet<PaymentDetail>(new Action<PaymentDetail>(this.attach_PaymentDetails), new Action<PaymentDetail>(this.detach_PaymentDetails));
			this._Fio = default(EntityRef<Fio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FioId", DbType="Int NOT NULL")]
		public int FioId
		{
			get
			{
				return this._FioId;
			}
			set
			{
				if ((this._FioId != value))
				{
					if (this._Fio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFioIdChanging(value);
					this.SendPropertyChanging();
					this._FioId = value;
					this.SendPropertyChanged("FioId");
					this.OnFioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenmoId", DbType="VarChar(MAX)")]
		public string VenmoId
		{
			get
			{
				return this._VenmoId;
			}
			set
			{
				if ((this._VenmoId != value))
				{
					this.OnVenmoIdChanging(value);
					this.SendPropertyChanging();
					this._VenmoId = value;
					this.SendPropertyChanged("VenmoId");
					this.OnVenmoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payer_PaymentDetail", Storage="_PaymentDetails", ThisKey="Id", OtherKey="PayerId")]
		public EntitySet<PaymentDetail> PaymentDetails
		{
			get
			{
				return this._PaymentDetails;
			}
			set
			{
				this._PaymentDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fio_Payer", Storage="_Fio", ThisKey="FioId", OtherKey="Id", IsForeignKey=true)]
		public Fio Fio
		{
			get
			{
				return this._Fio.Entity;
			}
			set
			{
				Fio previousValue = this._Fio.Entity;
				if (((previousValue != value) 
							|| (this._Fio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fio.Entity = null;
						previousValue.Payers.Remove(this);
					}
					this._Fio.Entity = value;
					if ((value != null))
					{
						value.Payers.Add(this);
						this._FioId = value.Id;
					}
					else
					{
						this._FioId = default(int);
					}
					this.SendPropertyChanged("Fio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payer = this;
		}
		
		private void detach_PaymentDetails(PaymentDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentDetails")]
	public partial class PaymentDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PayerId;
		
		private int _BillId;
		
		private double _RPercent;
		
		private double _SPercent;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Payer> _Payer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPayerIdChanging(int value);
    partial void OnPayerIdChanged();
    partial void OnBillIdChanging(int value);
    partial void OnBillIdChanged();
    partial void OnRPercentChanging(double value);
    partial void OnRPercentChanged();
    partial void OnSPercentChanging(double value);
    partial void OnSPercentChanged();
    #endregion
		
		public PaymentDetail()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Payer = default(EntityRef<Payer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayerId", DbType="Int NOT NULL")]
		public int PayerId
		{
			get
			{
				return this._PayerId;
			}
			set
			{
				if ((this._PayerId != value))
				{
					if (this._Payer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayerIdChanging(value);
					this.SendPropertyChanging();
					this._PayerId = value;
					this.SendPropertyChanged("PayerId");
					this.OnPayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillId", DbType="Int NOT NULL")]
		public int BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPercent", DbType="Float NOT NULL")]
		public double RPercent
		{
			get
			{
				return this._RPercent;
			}
			set
			{
				if ((this._RPercent != value))
				{
					this.OnRPercentChanging(value);
					this.SendPropertyChanging();
					this._RPercent = value;
					this.SendPropertyChanged("RPercent");
					this.OnRPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPercent", DbType="Float NOT NULL")]
		public double SPercent
		{
			get
			{
				return this._SPercent;
			}
			set
			{
				if ((this._SPercent != value))
				{
					this.OnSPercentChanging(value);
					this.SendPropertyChanging();
					this._SPercent = value;
					this.SendPropertyChanged("SPercent");
					this.OnSPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_PaymentDetail", Storage="_Bill", ThisKey="BillId", OtherKey="Id", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.PaymentDetails.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.PaymentDetails.Add(this);
						this._BillId = value.Id;
					}
					else
					{
						this._BillId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payer_PaymentDetail", Storage="_Payer", ThisKey="PayerId", OtherKey="Id", IsForeignKey=true)]
		public Payer Payer
		{
			get
			{
				return this._Payer.Entity;
			}
			set
			{
				Payer previousValue = this._Payer.Entity;
				if (((previousValue != value) 
							|| (this._Payer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payer.Entity = null;
						previousValue.PaymentDetails.Remove(this);
					}
					this._Payer.Entity = value;
					if ((value != null))
					{
						value.PaymentDetails.Add(this);
						this._PayerId = value.Id;
					}
					else
					{
						this._PayerId = default(int);
					}
					this.SendPropertyChanged("Payer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _VenmoId;
		
		private string _Password;
		
		private string _RealName;
		
		private EntitySet<Fio> _Fios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnVenmoIdChanging(string value);
    partial void OnVenmoIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    #endregion
		
		public User()
		{
			this._Fios = new EntitySet<Fio>(new Action<Fio>(this.attach_Fios), new Action<Fio>(this.detach_Fios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenmoId", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VenmoId
		{
			get
			{
				return this._VenmoId;
			}
			set
			{
				if ((this._VenmoId != value))
				{
					this.OnVenmoIdChanging(value);
					this.SendPropertyChanging();
					this._VenmoId = value;
					this.SendPropertyChanged("VenmoId");
					this.OnVenmoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="VarChar(MAX)")]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fio", Storage="_Fios", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Fio> Fios
		{
			get
			{
				return this._Fios;
			}
			set
			{
				this._Fios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fios(Fio entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Fios(Fio entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
